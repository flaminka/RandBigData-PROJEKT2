lines(t, sapply(t, g), type = "l", col = "blue")
ramka3 <- ramka2[ramka2$h1 <= 1, ]
ramka4 <- ramka2[ramka2$h1 > 1, ]
model3 <- lm(y ~ ., data = ramka3)
model4 <- lm(y ~ ., data = ramka4)
beta3 <- model3$coefficients
beta4 <- model4$coefficients
h1 <- function(t) {
sum(beta3 * c(1, t, t^2, t^3))
}
h2 <- function(t) {
sum(beta4 * c(1, t, t^2, t^3))
}
t <- seq(0,1,by = 0.05)
lines(t, sapply(t, h1), type = "l", col = "green")
t <- seq(1,2,by = 0.05)
lines(t, sapply(t, h2), type = "l", col = "green")
n <- 200
x <- runif(n, 0, 2)
y <- sin(pi * x) + rnorm(n, sd = 0.25)
plot(y ~ x)
ramka1 <- data.frame(y = y, h1 = x, h2 = x^2, h3 = x^3, h4 = pmax((x-1)^3, 0))
ramka1
model1 <- lm(y ~ ., data = ramka1)
beta1 <- model1$coefficients
f <- function(t) {
sum(beta1 * c(1, t, t^2, t^3, pmax((t-1)^3, 0)))
}
t <- seq(0,2,by = 0.05)
lines(t, sapply(t, f), type = "l", col = "red")
ramka2 <- data.frame(y = y, h1 = x, h2 = x^2, h3 = x^3)
model2 <- lm(y ~ ., data = ramka2)
beta2 <- model2$coefficients
g <- function(t) {
sum(beta2 * c(1, t, t^2, t^3))
}
t <- seq(0,2,by = 0.05)
lines(t, sapply(t, g), type = "l", col = "blue")
ramka3 <- ramka2[ramka2$h1 <= 1, ]
ramka4 <- ramka2[ramka2$h1 > 1, ]
model3 <- lm(y ~ ., data = ramka3)
model4 <- lm(y ~ ., data = ramka4)
beta3 <- model3$coefficients
beta4 <- model4$coefficients
h1 <- function(t) {
sum(beta3 * c(1, t, t^2, t^3))
}
h2 <- function(t) {
sum(beta4 * c(1, t, t^2, t^3))
}
t <- seq(0,1,by = 0.05)
lines(t, sapply(t, h1), type = "l", col = "green")
t <- seq(1,2,by = 0.05)
lines(t, sapply(t, h2), type = "l", col = "green")
n <- 200
x <- runif(n, 0, 2)
y <- sin(pi * x) + rnorm(n, sd = 0.5)
plot(y ~ x)
ramka1 <- data.frame(y = y, h1 = x, h2 = x^2, h3 = x^3, h4 = pmax((x-1)^3, 0))
ramka1
model1 <- lm(y ~ ., data = ramka1)
beta1 <- model1$coefficients
f <- function(t) {
sum(beta1 * c(1, t, t^2, t^3, pmax((t-1)^3, 0)))
}
t <- seq(0,2,by = 0.05)
lines(t, sapply(t, f), type = "l", col = "red")
ramka2 <- data.frame(y = y, h1 = x, h2 = x^2, h3 = x^3)
model2 <- lm(y ~ ., data = ramka2)
beta2 <- model2$coefficients
g <- function(t) {
sum(beta2 * c(1, t, t^2, t^3))
}
t <- seq(0,2,by = 0.05)
lines(t, sapply(t, g), type = "l", col = "blue")
ramka3 <- ramka2[ramka2$h1 <= 1, ]
ramka4 <- ramka2[ramka2$h1 > 1, ]
model3 <- lm(y ~ ., data = ramka3)
model4 <- lm(y ~ ., data = ramka4)
beta3 <- model3$coefficients
beta4 <- model4$coefficients
h1 <- function(t) {
sum(beta3 * c(1, t, t^2, t^3))
}
h2 <- function(t) {
sum(beta4 * c(1, t, t^2, t^3))
}
t <- seq(0,1,by = 0.05)
lines(t, sapply(t, h1), type = "l", col = "green")
t <- seq(1,2,by = 0.05)
lines(t, sapply(t, h2), type = "l", col = "green")
n <- 200
x <- runif(n, 0, 4)
y <- sin(pi * x) + rnorm(n, sd = 0.5)
plot(y ~ x)
ramka1 <- data.frame(y = y, h1 = x, h2 = x^2, h3 = x^3, h4 = pmax((x-1)^3, 0),
h5 = pmax((x-2)^3, 0), h6 = pmax((x-3)^3, 0))
ramka1
model1 <- lm(y ~ ., data = ramka1)
beta1 <- model1$coefficients
f <- function(t) {
sum(beta1 * c(1, t, t^2, t^3, pmax((t-1)^3, 0),pmax((t-1)^3, 0), pmax((t-1)^3, 0)))
}
t <- seq(0,2,by = 0.05)
lines(t, sapply(t, f), type = "l", col = "red")
t <- seq(0,4,by = 0.05)
lines(t, sapply(t, f), type = "l", col = "red")
n <- 200
x <- runif(n, 0, 4)
y <- sin(pi * x) + rnorm(n, sd = 0.5)
plot(y ~ x)
ramka1 <- data.frame(y = y, h1 = x, h2 = x^2, h3 = x^3, h4 = pmax((x-1)^3, 0),
h5 = pmax((x-2)^3, 0), h6 = pmax((x-3)^3, 0))
ramka1
model1 <- lm(y ~ ., data = ramka1)
beta1 <- model1$coefficients
f <- function(t) {
sum(beta1 * c(1, t, t^2, t^3, pmax((t-1)^3, 0),pmax((t-1)^3, 0), pmax((t-1)^3, 0)))
}
t <- seq(0,4,by = 0.05)
lines(t, sapply(t, f), type = "l", col = "red")
n <- 200
x <- runif(n, 0, 4)
y <- sin(pi * x) + rnorm(n, sd = 0.5)
plot(y ~ x)
ramka1 <- data.frame(y = y, h1 = x, h2 = x^2, h3 = x^3, h4 = pmax((x-1)^3, 0),
h5 = pmax((x-2)^3, 0), h6 = pmax((x-3)^3, 0))
ramka1
model1 <- lm(y ~ ., data = ramka1)
beta1 <- model1$coefficients
f <- function(t) {
sum(beta1 * c(1, t, t^2, t^3, pmax((t-1)^3, 0),pmax((t-2)^3, 0), pmax((t-3)^3, 0)))
}
t <- seq(0,4,by = 0.05)
lines(t, sapply(t, f), type = "l", col = "red")
ramka2 <- data.frame(y = y, h1 = x, h2 = x^2, h3 = x^3)
model2 <- lm(y ~ ., data = ramka2)
beta2 <- model2$coefficients
g <- function(t) {
sum(beta2 * c(1, t, t^2, t^3))
}
t <- seq(0,2,by = 0.05)
lines(t, sapply(t, g), type = "l", col = "blue")
t <- seq(0,4,by = 0.05)
lines(t, sapply(t, g), type = "l", col = "blue")
shiny::runApp('Programowanie/R/shiny/ap1')
x <- runif(10)
z <- x + rnorm(10)
ramka <- data.frame(x = x, y = 2*x, z = z)
lm(z ~., data = ramka)
summary(lm(z ~., data = ramka))
ramka <- data.frame(x = x, y = 2*x + rnorm(10, sd = 0.01), z = z)
summary(lm(z ~., data = ramka))
1293856190561092736519876876987526438975264359876234958
1293856190561092736519876876987526438975264359876234958 -
1293856190561092736519876876987526438975264359876234957
958 - 957
98124367 9817425
98124367 - 9817425
shiny::runApp('Programowanie/R/shiny/ap1')
runApp('Programowanie/R/shiny/cnk_dashboard')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Programowanie/R/shiny/cnk_dashboard')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
library(shinyjs)
install.packages("shinyjs")
library(shinyjs)
server <- function(input, output, session) {
observeEvent(input$button, {
toggle("myslider")
})
}
ui <- fluidPage(
useShinyjs(),
h3("A quick demonstration of shinyjs functionality"),
actionButton("button", "Toggle slider"),
sliderInput("myslider", "A slider:", min=0, max=1000, value=500)
)
shinyApp(ui = ui, server = server)
runApp('Programowanie/R/shiny/cnk_dashboard')
runApp('Programowanie/R/shiny/cnk_dashboard')
runApp('Programowanie/R/shiny/cnk_dashboard')
runApp('Programowanie/R/shiny/cnk_dashboard')
runApp('Programowanie/R/shiny/cnk_dashboard')
library(shiny)
library(shinyjs)
ui <- tagList(
useShinyjs(),
navbarPage(
"shinyjs with navbarPage",
tabPanel("tab1",
actionButton("button", "Click me"),
div(id = "hello", "Hello!")),
tabPanel("tab2")
)
)
server <- function(input, output, session) {
observeEvent(input$button, {
toggle("hello")
})
}
shinyApp(ui, server)
runApp('Programowanie/R/shiny/cnk_dashboard')
library(shiny)
library(shinyjs)
ui <- tagList(
useShinyjs(),
navbarPage(
"shinyjs with navbarPage",
tabPanel("tab1",
actionButton("button", "Click me"),
div(id = "hello", "Hello!")),
tabPanel("tab2")
)
)
server <- function(input, output, session) {
observeEvent(input$button, {
toggle("hello")
})
}
shinyApp(ui, server)
shiny::runApp('Programowanie/R/shiny/cnk_dashboard')
library(shiny)
library(shinyjs)
ui <- tagList(
useShinyjs(),
navbarPage(
"shinyjs with navbarPage",
tabPanel("tab1",
actionButton("button", "Click me"),
div(id = "hello", "Hello!")),
tabPanel("tab2")
)
)
server <- function(input, output, session) {
observeEvent(input$button, {
toggle("hello")
})
}
shinyApp(ui, server)
library(devtools)
install.packages("devtools")
library(devtools)
create("~/Uczelnia/R i Big Data/Projekt2/faza2/OpinieOBankach")
install.packages("Rfacebook")
require(Rfacebook)
require(pbapply)
require(httr)
library(adabag)
cp <- 10^(seq(-3, -1, by = 0.5))
cp
cp <- 10^(seq(-3, -1, by = 0.25))
cp
cp <- 10^(seq(-3, -1, by = 0.4))
cp
czulosc <- matrix(0, length(minsplit), length(cp))
minsplit <- (1:10)^2
cp <- 10^(seq(-3, -1, by = 0.4))
czulosc <- matrix(0, length(minsplit), length(cp))
czulosc
dokl <- matrix(0, length(minsplit), length(cp))
dokl
spark_path <-strsplit(system("brew info apache-spark",intern=T)[4],' ')[[1]][1]
spark_path <- strsplit(system("brew info apache-spark",intern=T)[4],' ')[[1]][1]
install.packages(SparkR)
install.packages("SparkR")
spark_path <- strsplit(system("brew info apache-spark",intern=T)[4],' ')[[1]][1]
library(parallel)
parSapply(makeCluster(3), 1:3, function(x) stop("aa"))
a <- parSapply(makeCluster(3), 1:3, function(x) stop("aa"))
a
x <- rexp(100)
plot(x)
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
library(survival)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
lambda <- sum(d) / sum(t)
lambda
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
lambda <- sum(d) / sum(t)
lambda
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
x <- seq(0, 4, by = 0.01)
x <- seq(0, 4, by = 0.01)
y <- exp(-lambda * x)
lines(x, y, col = "red")
y2 <- exp(-x)
lines(x, y, col = "blue")
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
x <- seq(0, 4, by = 0.01)
y <- exp(-lambda * x)
lines(x, y, col = "red")
y2 <- exp(-x)
lines(x, y, col = "blue")
t <- rexp(100)
d <- rbinom(100, 1, 0.7)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
x <- seq(0, 4, by = 0.01)
y <- exp(-lambda * x)
lines(x, y, col = "red")
y2 <- exp(-x)
lines(x, y2, col = "blue")
t <- rexp(100)
d <- rexp(100)
t_cen <- rexp(100)
t_zd <- rexp(100)
t_cen <- rexp(100)
d <- 1*(t_zd <= t_cen)
t <- min(t_zd, t_cen)
km <- survfit(Surv(t, d) ~ 1)
t_zd <- rexp(100)
t_cen <- rexp(100)
d <- (t_zd <= t_cen) + 0
t <- pmin(t_zd, t_cen)
km <- survfit(Surv(t, d) ~ 1)
plot(km)
(lambda <- sum(d) / sum(t))
x <- seq(0, 4, by = 0.01)
y <- exp(-lambda * x)
lines(x, y, col = "red")
y2 <- exp(-x)
lines(x, y2, col = "blue")
library(shinydashboard)
library(shiny)
setwd("Uczelnia/R i Big Data/Projekt2/faza3/apka/")
runApp()
runApp()
runApp()
runApp()
header <- dashboardHeader(title = "Wykrywanie charakterystycznych słów na fanpage'ach banków",
titleWidth = 650)
header
header$children
header$children[[3]]
header$children[[3]]$children
runApp()
runApp()
runApp()
runApp()
runApp()
header
runApp()
header <- dashboardHeader(title = "Wykrywanie charakterystycznych słów na fanpage'ach banków",
titleWidth = 650)
header$children[[3]]$children[[3]] <-
tags$span(
"Ewa Baranowska, Dorota Łępicka, Michał Muck, Michał Stolarczyk")
header
header <- dashboardHeader(title = "Wykrywanie charakterystycznych słów na fanpage'ach banków",
titleWidth = 650)
header$children[[4]] <-
tags$span(
"Ewa Baranowska, Dorota Łępicka, Michał Muck, Michał Stolarczyk")
header
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("../../faza1/github/RandBigData-PROJEKT2/faza3/apka/")
source("filterByPlotDF.R")
source("filterByPlotList.R")
source("filterByPlotDF.R", encoding = "cp-1250")
source("filterByPlotDF.R", encoding = "cp1250")
source("filterByPlotList.R", encoding = "cp1250")
dane <- read.csv("dane_rzecz.csv")
min(dane$created_at)
dane <- read.csv("dane_rzecz.csv", stringsAsFactors = FALSE)
min(dane$created_at)
max(dane$created_at)
czeste <- filterByPlotDF("2013-06-20", "2016-02-28", dane)
head(czeste)
unique(dane$user_name)
head(dane)
unique(dane$user_name)
sort(table(dane$user_name), decreasing = TRUE)[1:100]
dane <- read.csv("dane_rzecz.csv", stringsAsFactors = FALSE,
encoding = "cp1250")
czeste <- filterByPlotDF("2013-06-20", "2016-02-28", dane)
head(dane)
head(czeste)
head(czeste, 100)
sort(table(czeste), decreasing = TRUE)[1:100]
czeste
sort(table(czeste$rzeczownik), decreasing = TRUE)[1:100]
sort(table(czeste$rzeczownik), decreasing = TRUE)[1:100]["awaria"]
sort(table(czeste$rzeczownik), decreasing = TRUE)[1:100]["problem"]
filter(czest, rzeczownik == "problem")
filter(czeste, rzeczownik == "problem")
filter(czeste, rzeczownik == "problem")
ramka <- filter(czeste, rzeczownik == "problem")
plot(ramka$ile ~ as.Date(ramka$date))
plot(ramka$ile ~ as.Date(ramka$date), ylim = c(0, max(ramka$ile) + 1))
