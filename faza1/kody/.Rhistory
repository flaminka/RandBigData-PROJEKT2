file.remove("oferty.db")
wczytaj.dane
library(cnk)
wczytaj.dane
install.packages("bootstrap")
law
library("bootstrap")
law
plit(GPA ~ LSAT, data = law)
plot(GPA ~ LSAT, data = law)
plot(GPA ~ LSAT, data = law, pch = 19, ls = 1)
plot(GPA ~ LSAT, data = law, pch = 19, las = 1)
library("bootstrap")
law
plot(GPA ~ LSAT, law)
(cyfra.PHfit <- cox.zph(cyfra.PH.pelny, transform="identity"))
(cyfra.PHfit <- cox.zph(cyfra.PH.pelny, transform="identity"))
install.packages("tm")
library("tm")
iris
install.packages("profr")
install.packages("rms")
iris
library(rms)
library(microbenchmark)
library(ggplot2)
lm(Sepal.Width ~ Speciec, data = iris)
lm(Sepal.Width ~ Species, data = iris)
porownanie <- microbenchmark(
lm = lm(Sepal.Width ~ Species, data = iris),
glm = glm(Sepal.Width ~ Species, data = iris)
)
boxplot(porownanie)
porownanie <- microbenchmark(
lm = lm(Sepal.Width ~ Species, data = iris),
glm = glm(Sepal.Width ~ Species, data = iris),
aov = aov(Sepal.Width ~ Species, data = iris)
)
boxplot(porownanie)
porownanie <- microbenchmark(
lm = lm(Sepal.Width ~ Species, data = iris),
glm = glm(Sepal.Width ~ Species, data = iris),
aov = aov(Sepal.Width ~ Species, data = iris),
ols = ols(Sepal.Width ~ Species, data = iris)
)
boxplot(porownanie)
`%asdkfh%` <- function(x,y) {
x+y
}
2 %asdkfh% 2
`%+=%` <- function(x,y) {
x+y
}
2 %+=% 2
shiny::runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
lim
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
lim$usr[3]
lim$usr[4]
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
lim$usr
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
?`<<-`
runApp('Uczelnia/R i Big Data/CNK/apka3')
environment()
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
rev
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
runApp('Uczelnia/R i Big Data/CNK/apka3')
shiny::runApp('Uczelnia/R i Big Data/CNK/final/apka')
shiny::runApp('Uczelnia/R i Big Data/CNK/final/apka')
pelne_nazwy
class(pelne_nazwy)
names(pelne_nazwy)
library(stringi)
stri_encode(pelne_nazwy, from = "cp1250", to = "UTF-8")
pelne_nazwy <- stri_encode(pelne_nazwy, from = "cp1250", to = "UTF-8")
pelne_nazwy
names(pelne_nazwy)
pn <- as.factor(pelne_nazwy)
rm(pelne_nazwy)
pelne_nazwy
names(pn) <- names(pelne_nazwy)
pn
pelne_nazwy <- pn
save(pelne_nazwy, file = "pelne_nazwy.rda")
shiny::runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
eksponaty
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
img
class(png)
class(img)
shiny::runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
shiny::runApp('Uczelnia/R i Big Data/CNK/final/apka')
shiny::runApp('Uczelnia/R i Big Data/CNK/final/apka')
shiny::runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
library(cnk)
runApp('Uczelnia/R i Big Data/CNK/final/apka')
shiny::runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
shiny::runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
env()
environment()
a <- 1
environment()$a
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
shiny::runApp('Uczelnia/R i Big Data/CNK/final/apka')
shiny::runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Uczelnia/R i Big Data/CNK/final/apka')
runApp('Pulpit/faza')
runApp('Pulpit/faza')
lag
lag(1:4)
plot(lag(1:4))
library(httr)
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
set_config( config( ssl_verifypeer = 0L ) )
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json",
config = list(cainfo="/home/michal/R/x86_64-pc-linux-gnu-library/3.2/httr/inst"))
packageVersion("httr")
remove.packages("httr")
install.packages("http://cran.r-project.org/src/contrib/Archive/httr/httr_0.6.1.tar.gz", repos=NULL, type="source")
library(httr)
packageVersion("httr")
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json",
config = list(cainfo="/home/michal/R/x86_64-pc-linux-gnu-library/3.2/httr/inst"))
remove.packages("httr")
install.packages("httr")
install.packages("httr")
library(httr)
packageVersion("httr")
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json",
config = list(cainfo="/home/michal/R/x86_64-pc-linux-gnu-library/3.2/httr/inst"))
library(openssl)
cert <- download_ssl_cert("www.r-project.org")
korekta <- POST("https://www.ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
print(cert)
print(as.list(cert[[1]]))
verify_cert(cert, ca_bundle())
ca_bundle()
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
curl::curl_options()
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
curl::curl_options()
with_config( config( ssl_verifypeer = 0L ), {
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
})
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json",
config = list(cainfo="cacert.pem"))
korekta <- GET("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json",
config = list(cainfo="cacert.pem"))
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), #token="2$zgITnb02!lV"),
#add_headers("Content-Type" = "application/json"), encode = "json",
config = list(cainfo="cacert.pem"))
q
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
#add_headers("Content-Type" = "application/json"), encode = "json",
config = list(cainfo="cacert.pem"))
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
#body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
#add_headers("Content-Type" = "application/json"), encode = "json",
config = list(cainfo="cacert.pem"))
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
config(cainfo="cacert.pem"))
library(RCurl)
curl::curl_options()
url <- "https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single"
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV")
korekta <- getURL(url, boyy = body, cainfo=cafile)
korekta <- getURL(url, boyy = body, cainfo="cacert.pem")
korekta <- getURL(url, body = body, cainfo="cacert.pem")
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV")
add_headers("Content-Type" = "application/json"), encode = "json")
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
getURL(
"https://www.esds.ac.uk/secure/UKDSRegister_start.asp" ,
.opts = list(ssl.verifypeer = FALSE)
)
getURL(
"https://www.google.com" ,
.opts = list(ssl.verifypeer = FALSE)
)
getURL(
"https://www.google.pl" ,
.opts = list(ssl.verifypeer = FALSE)
)
postForm("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
params = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
.opts = list(ssl.verifypeer = FALSE)
)
postForm("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
params = list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
.opts = list(ssl.verifypeer = FALSE)
)
postForm("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
params = list(body="gotofy do prob?", token="2$zgITnb02!lV"),
.opts = list(ssl.verifypeer = FALSE)
)
postForm("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body="gotofy do prob?", token="2$zgITnb02!lV",
.opts = list(ssl.verifypeer = FALSE)
)
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
korekta <- getURL(url, body = body, cainfo="cacert.pem")
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json",
config(cainfo="applica.crt"))
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json",
config = list(cainfo="cacert.pem"))
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json",
config = list(cainfo="applica.crt"))
httr_options()
curl_docs("ssl_verifypeer")
set_config( config( sslcert = "applica.crt") )
set_config( config( sslcert = "applica.crt") )
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
set_config( config( sslcert = "cacert.pem") )
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
with_config(config = config(sslcert = "cacert.pem"), {
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
})
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
})
with_config(config = config(sslcert = "cacert.pem"), {
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
})
set_config( config( ssl_verifycert = 0L) )
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
set_config( config( sl_verifypeer = 0L) )
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
set_config( config( ssl_verifypeer = 0L) )
library(httr)
library(RCurl)
set_config( config( ssl_verifypeer = 0L) )
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
set_config( config( ssl_verifypeer = 0L) )
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
library(httr)
library(RCurl)
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
library(httr)
library(RCurl)
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
library(httr)
library(RCurl)
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
set_config( config( ssl_verifypeer = 0L) )
korekta <- POST("https://ec2-54-194-28-130.eu-west-1.compute.amazonaws.com/ams-ws-nlp/rest/spell/single",
body = list(message=list(body="gotofy do prob?"), token="2$zgITnb02!lV"),
add_headers("Content-Type" = "application/json"), encode = "json")
library(dplyr)
library(stringi)
options(stringsAsFactors = FALSE)
dane <- read.csv("../dane/dane_ost.csv")
# Konwersja na utf-8,  na Windowsie trzeba zakomentować
dane <- lapply(dane, function(x)
if(is.character(x)) stri_encode(x, from = "cp-1250", to = "utf-8")
else x)
dane <- data.frame(dane)
liczby_postow <- table(dane$thread_id)
# liczby watków o zadanej liczbie postów
table(liczby_postow)
# na razie ograniczę się do wątków niekrótszych niż 10 postów
watki <- names(liczby_postow)[liczby_postow >= 10]
# wybrano
length(watki)
# wątków z
length(unique(dane$thread_id))
# watek <- watki[1]
#sapply(dane, class)
slowa_w_watku <- function(watek, dane) {
dane %>%
filter(thread_id == watek) %>%
.$rzeczowniki ->
rzeczowniki
unlist(strsplit(rzeczowniki, "|", fixed = TRUE))
}
slowa <- lapply(watki, slowa_w_watku, dane)
source("ranking_slowa.R")
rankingi <- sapply(slowa, function(sl) ranking_slowa(sl)$word[1:5])
View(rankingi)
charakterystyczne <- function(slowa, min_tfidf) {
library(tm)
# łaczenie słów wewnątrz jednego wątku w napis
napis <- sapply(slowa, paste, collapse = " ")
korpus <- VCorpus(VectorSource(slowa))
# macierz liczby wystąpień słów
macierz <- DocumentTermMatrix(korpus)
# tfidf: https://en.wikipedia.org/wiki/Tf%E2%80%93idf
tfidf <- weightTfIdf(macierz)
# zamiana macierzy rzadkiej na gęstą
M <- as.matrix(tfidf)
# z każdego dokumentu wybieramy te słowa, które mają tfidf >= min_tfidf
char <- apply(M, 1, function(row) names(row[row >= min_tfidf]))
char[sapply(char, length) > 0]
}
char <- charakterystyczne(slowa, 0.3)
charakterystyczne <- function(slowa, min_tfidf) {
library(tm)
# łaczenie słów wewnątrz jednego wątku w napis
napis <- sapply(slowa, paste, collapse = " ")
korpus <- VCorpus(VectorSource(slowa))
# macierz liczby wystąpień słów
macierz <- DocumentTermMatrix(korpus)
# tfidf: https://en.wikipedia.org/wiki/Tf%E2%80%93idf
tfidf <- weightTfIdf(macierz)
# zamiana macierzy rzadkiej na gęstą
M <- as.matrix(tfidf)
# z każdego dokumentu wybieramy te słowa, które mają tfidf >= min_tfidf
char <- apply(M, 1, function(row) names(row[row >= min_tfidf]))
char[sapply(char, length) > 0]
}
char <- charakterystyczne(slowa, 0.3)
char <- charakterystyczne(slowa, 0.3)
napis <- sapply(slowa, paste, collapse = " ")
setwd("Uczelnia/R i Big Data/Projekt2/github/RandBigData-PROJEKT2/faza1/kody/")
library(dplyr)
library(stringi)
options(stringsAsFactors = FALSE)
dane <- read.csv("../dane/dane_ost.csv")
# Konwersja na utf-8,  na Windowsie trzeba zakomentować
dane <- lapply(dane, function(x)
if(is.character(x)) stri_encode(x, from = "cp-1250", to = "utf-8")
else x)
dane <- data.frame(dane)
liczby_postow <- table(dane$thread_id)
# liczby watków o zadanej liczbie postów
table(liczby_postow)
# na razie ograniczę się do wątków niekrótszych niż 10 postów
watki <- names(liczby_postow)[liczby_postow >= 10]
# wybrano
length(watki)
# wątków z
length(unique(dane$thread_id))
# watek <- watki[1]
#sapply(dane, class)
slowa_w_watku <- function(watek, dane) {
dane %>%
filter(thread_id == watek) %>%
.$rzeczowniki ->
rzeczowniki
unlist(strsplit(rzeczowniki, "|", fixed = TRUE))
}
slowa <- lapply(watki, slowa_w_watku, dane)
source("ranking_slowa.R")
rankingi <- sapply(slowa, function(sl) ranking_slowa(sl)$word[1:5])
View(rankingi)
charakterystyczne <- function(slowa, min_tfidf) {
library(tm)
# łaczenie słów wewnątrz jednego wątku w napis
napis <- sapply(slowa, paste, collapse = " ")
korpus <- VCorpus(VectorSource(slowa))
# macierz liczby wystąpień słów
macierz <- DocumentTermMatrix(korpus)
# tfidf: https://en.wikipedia.org/wiki/Tf%E2%80%93idf
tfidf <- weightTfIdf(macierz)
# zamiana macierzy rzadkiej na gęstą
M <- as.matrix(tfidf)
# z każdego dokumentu wybieramy te słowa, które mają tfidf >= min_tfidf
char <- apply(M, 1, function(row) names(row[row >= min_tfidf]))
char[sapply(char, length) > 0]
}
char <- charakterystyczne(slowa, 0.3)
char
dane[dane$thread_id == watki[325], "body"]
char <- charakterystyczne(slowa, 0.3)
char
dane[dane$thread_id == watki[262], "body"]
dane[dane$thread_id == watki[280], "body"]
